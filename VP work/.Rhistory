for (n in 1:length(Ninit)) {
for (k in 1:length(Kcap)) {
for (r in 1:length(rates)) {
SSE <- 0
for (i in 1:34) {
N[1] = Ninit[n]
SSE[i] = (Nobs[i] - N[i])^2
N[i+1] = N[i] + r * N[i] * (1 - (N[i]/k))
}
SSE = sum(SSE)
SSEarray[1,1,counter] = Ninit[n]
SSEarray[1,2,counter] = Kcap[k]
SSEarray[1,3,counter] = rates[r]
SSEarray[1,4,counter] = SSE
counter = counter + 1
}
}
}
# Find the index of the minimum SSE
min_SSE_index <- which.min(SSEarray[1,4,])
min_SSE = SSEarray[1,,min_SSE_index, drop = FALSE]
min_SSE
best_n = SSEarray[1,1,min_SSE_index]
best_k = SSEarray[1,2,min_SSE_index]
best_r = SSEarray[1,3,min_SSE_index]
par(mfrow = c(1,3))
indices_n <- which(SSEarray[1, 2, ] == 1500 & SSEarray[1, 3, ] == 0.01)
if (length(indices_n) > 0) {
plot(SSEarray[1, 1, indices_n], SSEarray[1, 4, indices_n], type = "l", col = "blue", xlab = "Ninit", ylab = "SSE", main = "SSE vs. Ninit")
}
indices_k <- which(SSEarray[1, 1, ] == 135 & SSEarray[1, 3, ] == 0.01)
if (length(indices_k) > 0) {
plot(SSEarray[1, 2, indices_k], SSEarray[1, 4, indices_k], type = "l", col = "red", xlab = "Kcap", ylab = "SSE", main = "SSE vs. Kcap")
}
indices_r <- which(SSEarray[1, 1, ] == 135 & SSEarray[1, 2, ] == 1500)
if (length(indices_r) > 0) {
plot(SSEarray[1, 3, indices_r], SSEarray[1, 4, indices_r], type = "l", col = "green", xlab = "Rates", ylab = "SSE", main = "SSE vs. Rates")
}
data <- read.csv("../Labs/RMNP elk time series.csv")
Nobs = data$Population_size
rates <- seq(0.1, 0.3, by = 0.01)
Kcap <- seq(800, 1200, by = 5)
Ninit <- seq(200, 500, by = 5)
counter = 1
SSEarray = array(0, dim = c(1,4,length(Ninit) * length(Kcap) * length(rates)))
for (n in 1:length(Ninit)) {
for (k in 1:length(Kcap)) {
for (r in 1:length(rates)) {
SSE <- 0
for (i in 1:34) {
N[1] = Ninit[n]
SSE[i] = (Nobs[i] - N[i])^2
N[i+1] = N[i] + r * N[i] * (1 - (N[i]/Kcap[k]))
}
SSE = sum(SSE)
SSEarray[1,1,counter] = Ninit[n]
SSEarray[1,2,counter] = Kcap[k]
SSEarray[1,3,counter] = rates[r]
SSEarray[1,4,counter] = SSE
counter = counter + 1
}
}
}
# Find the index of the minimum SSE
min_SSE_index <- which.min(SSEarray[1,4,])
min_SSE = SSEarray[1,,min_SSE_index, drop = FALSE]
min_SSE
best_n = SSEarray[1,1,min_SSE_index]
best_k = SSEarray[1,2,min_SSE_index]
best_r = SSEarray[1,3,min_SSE_index]
par(mfrow = c(1,3))
indices_n <- which(SSEarray[1, 2, ] == 1500 & SSEarray[1, 3, ] == 0.01)
if (length(indices_n) > 0) {
plot(SSEarray[1, 1, indices_n], SSEarray[1, 4, indices_n], type = "l", col = "blue", xlab = "Ninit", ylab = "SSE", main = "SSE vs. Ninit")
}
indices_k <- which(SSEarray[1, 1, ] == 135 & SSEarray[1, 3, ] == 0.01)
if (length(indices_k) > 0) {
plot(SSEarray[1, 2, indices_k], SSEarray[1, 4, indices_k], type = "l", col = "red", xlab = "Kcap", ylab = "SSE", main = "SSE vs. Kcap")
}
indices_r <- which(SSEarray[1, 1, ] == 135 & SSEarray[1, 2, ] == 1500)
if (length(indices_r) > 0) {
plot(SSEarray[1, 3, indices_r], SSEarray[1, 4, indices_r], type = "l", col = "green", xlab = "Rates", ylab = "SSE", main = "SSE vs. Rates")
}
data <- read.csv("../Labs/RMNP elk time series.csv")
Nobs = data$Population_size
rates <- seq(0.1, 0.3, by = 0.01)
Kcap <- seq(800, 1200, by = 5)
Ninit <- seq(200, 500, by = 5)
counter = 1
SSEarray = array(0, dim = c(1,4,length(Ninit) * length(Kcap) * length(rates)))
for (n in 1:length(Ninit)) {
for (k in 1:length(Kcap)) {
for (r in 1:length(rates)) {
SSE <- 0
for (i in 1:34) {
N[1] = Ninit[n]
SSE[i] = (Nobs[i] - N[i])^2
N[i+1] = N[i] + rates[r] * N[i] * (1 - (N[i]/Kcap[k]))
}
SSE = sum(SSE)
SSEarray[1,1,counter] = Ninit[n]
SSEarray[1,2,counter] = Kcap[k]
SSEarray[1,3,counter] = rates[r]
SSEarray[1,4,counter] = SSE
counter = counter + 1
}
}
}
# Find the index of the minimum SSE
min_SSE_index <- which.min(SSEarray[1,4,])
min_SSE = SSEarray[1,,min_SSE_index, drop = FALSE]
min_SSE
best_n = SSEarray[1,1,min_SSE_index]
best_k = SSEarray[1,2,min_SSE_index]
best_r = SSEarray[1,3,min_SSE_index]
par(mfrow = c(1,3))
indices_n <- which(SSEarray[1, 2, ] == 1500 & SSEarray[1, 3, ] == 0.01)
if (length(indices_n) > 0) {
plot(SSEarray[1, 1, indices_n], SSEarray[1, 4, indices_n], type = "l", col = "blue", xlab = "Ninit", ylab = "SSE", main = "SSE vs. Ninit")
}
indices_k <- which(SSEarray[1, 1, ] == 135 & SSEarray[1, 3, ] == 0.01)
if (length(indices_k) > 0) {
plot(SSEarray[1, 2, indices_k], SSEarray[1, 4, indices_k], type = "l", col = "red", xlab = "Kcap", ylab = "SSE", main = "SSE vs. Kcap")
}
indices_r <- which(SSEarray[1, 1, ] == 135 & SSEarray[1, 2, ] == 1500)
if (length(indices_r) > 0) {
plot(SSEarray[1, 3, indices_r], SSEarray[1, 4, indices_r], type = "l", col = "green", xlab = "Rates", ylab = "SSE", main = "SSE vs. Rates")
}
data <- read.csv("../Labs/RMNP elk time series.csv")
Nobs = data$Population_size
rates <- seq(0.1, 0.3, by = 0.01)
Kcap <- seq(800, 1200, by = 5)
Ninit <- seq(200, 500, by = 5)
counter = 1
SSEarray = array(0, dim = c(1,4,length(Ninit) * length(Kcap) * length(rates)))
for (n in 1:length(Ninit)) {
for (k in 1:length(Kcap)) {
for (r in 1:length(rates)) {
SSE <- 0
for (i in 1:34) {
N[1] = Ninit[n]
SSE[i] = (Nobs[i] - N[i])^2
N[i+1] = N[i] + rates[r] * N[i] * (1 - (N[i]/Kcap[k]))
}
SSE = sum(SSE)
SSEarray[1,1,counter] = Ninit[n]
SSEarray[1,2,counter] = Kcap[k]
SSEarray[1,3,counter] = rates[r]
SSEarray[1,4,counter] = SSE
counter = counter + 1
}
}
}
# Find the index of the minimum SSE
min_SSE_index <- which.min(SSEarray[1,4,])
min_SSE = SSEarray[1,,min_SSE_index, drop = FALSE]
min_SSE
best_n = SSEarray[1,1,min_SSE_index]
best_k = SSEarray[1,2,min_SSE_index]
best_r = SSEarray[1,3,min_SSE_index]
par(mfrow = c(1,3))
indices_n <- which(SSEarray[1, 2, ] == 1500 & SSEarray[1, 3, ] == 0.01)
if (length(indices_n) > 0) {
plot(SSEarray[1, 1, indices_n], SSEarray[1, 4, indices_n], type = "l", col = "blue", xlab = "Ninit", ylab = "SSE", main = "SSE vs. Ninit")
}
indices_k <- which(SSEarray[1, 1, ] == 135 & SSEarray[1, 3, ] == 0.01)
if (length(indices_k) > 0) {
plot(SSEarray[1, 2, indices_k], SSEarray[1, 4, indices_k], type = "l", col = "red", xlab = "Kcap", ylab = "SSE", main = "SSE vs. Kcap")
}
indices_r <- which(SSEarray[1, 1, ] == 135 & SSEarray[1, 2, ] == 1500)
if (length(indices_r) > 0) {
plot(SSEarray[1, 3, indices_r], SSEarray[1, 4, indices_r], type = "l", col = "green", xlab = "Rates", ylab = "SSE", main = "SSE vs. Rates")
}
if (length(indices_n) > 0) {
plot(SSEarray[1, 1, indices_n], SSEarray[1, 4, indices_n], type = "l", col = "blue", xlab = "Ninit", ylab = "SSE", main = "SSE vs. Ninit")
}
indices_k <- which(SSEarray[1, 1, ] == 135 & SSEarray[1, 3, ] == 0.01)
if (length(indices_k) > 0) {
plot(SSEarray[1, 2, indices_k], SSEarray[1, 4, indices_k], type = "l", col = "red", xlab = "Kcap", ylab = "SSE", main = "SSE vs. Kcap")
}
indices_r <- which(SSEarray[1, 1, ] == 135 & SSEarray[1, 2, ] == 1500)
if (length(indices_r) > 0) {
plot(SSEarray[1, 3, indices_r], SSEarray[1, 4, indices_r], type = "l", col = "green", xlab = "Rates", ylab = "SSE", main = "SSE vs. Rates")
}
indices_n <- which(SSEarray[1, 2, ] == best_k & SSEarray[1, 3, ] == best_r)
if (length(indices_n) > 0) {
plot(SSEarray[1, 1, indices_n], SSEarray[1, 4, indices_n], type = "l", col = "blue", xlab = "Ninit", ylab = "SSE", main = "SSE vs. Ninit")
}
indices_n <- which(SSEarray[1, 2, ] == best_k & SSEarray[1, 3, ] == best_r)
if (length(indices_n) > 0) {
plot(SSEarray[1, 1, indices_n], SSEarray[1, 4, indices_n], type = "l", col = "blue", xlab = "Ninit", ylab = "SSE", main = "SSE vs. Ninit")
}
par(mfrow = c(1,3))
indices_n <- which(SSEarray[1, 2, ] == best_k & SSEarray[1, 3, ] == best_r)
if (length(indices_n) > 0) {
plot(SSEarray[1, 1, indices_n], SSEarray[1, 4, indices_n], type = "l", col = "blue", xlab = "Ninit", ylab = "SSE", main = "SSE vs. Ninit")
}
indices_k <- which(SSEarray[1, 1, ] == best_n & SSEarray[1, 3, ] == best_r)
if (length(indices_k) > 0) {
plot(SSEarray[1, 2, indices_k], SSEarray[1, 4, indices_k], type = "l", col = "red", xlab = "Kcap", ylab = "SSE", main = "SSE vs. Kcap")
}
indices_r <- which(SSEarray[1, 1, ] == best_n & SSEarray[1, 2, ] == best_k)
if (length(indices_r) > 0) {
plot(SSEarray[1, 3, indices_r], SSEarray[1, 4, indices_r], type = "l", col = "green", xlab = "Rates", ylab = "SSE", main = "SSE vs. Rates")
}
data <- read.csv("../Labs/RMNP elk time series.csv")
Nobs = data$Population_size
rates <- seq(0.1, 0.3, by = 0.01)
Kcap <- seq(800, 1200, by = 5)
Ninit <- seq(200, 500, by = 5)
counter = 1
SSEarray = array(0, dim = c(1,4,length(Ninit) * length(Kcap) * length(rates)))
for (n in 1:length(Ninit)) {
for (k in 1:length(Kcap)) {
for (r in 1:length(rates)) {
SSE <- 0
for (i in 1:34) {
N[1] = Ninit[n]
SSE[i] = (Nobs[i] - N[i])^2
N[i+1] = N[i] + rates[r] * N[i] * (1 - (N[i]/Kcap[k]))
}
SSE = sum(SSE)
SSEarray[1,1,counter] = Ninit[n]
SSEarray[1,2,counter] = Kcap[k]
SSEarray[1,3,counter] = rates[r]
SSEarray[1,4,counter] = SSE
counter = counter + 1
}
}
}
data <- read.csv("../Labs/RMNP elk time series.csv")
Nobs = data$Population_size
rates <- seq(0.1, 0.3, by = 0.01)
Kcap <- seq(800, 1200, by = 5)
Ninit <- seq(200, 500, by = 5)
counter = 1
N=0
SSEarray = array(0, dim = c(1,4,length(Ninit) * length(Kcap) * length(rates)))
for (n in 1:length(Ninit)) {
for (k in 1:length(Kcap)) {
for (r in 1:length(rates)) {
SSE <- 0
for (i in 1:34) {
N[1] = Ninit[n]
SSE[i] = (Nobs[i] - N[i])^2
N[i+1] = N[i] + rates[r] * N[i] * (1 - (N[i]/Kcap[k]))
}
SSE = sum(SSE)
SSEarray[1,1,counter] = Ninit[n]
SSEarray[1,2,counter] = Kcap[k]
SSEarray[1,3,counter] = rates[r]
SSEarray[1,4,counter] = SSE
counter = counter + 1
}
}
}
min_SSE_index <- which.min(SSEarray[1,4,])
min_SSE = SSEarray[1,,min_SSE_index, drop = FALSE]
min_SSE
best_n = SSEarray[1,1,min_SSE_index]
best_k = SSEarray[1,2,min_SSE_index]
best_r = SSEarray[1,3,min_SSE_index]
par(mfrow = c(1,3))
indices_n <- which(SSEarray[1, 2, ] == best_k & SSEarray[1, 3, ] == best_r)
if (length(indices_n) > 0) {
plot(SSEarray[1, 1, indices_n], SSEarray[1, 4, indices_n], type = "l", col = "blue", xlab = "Ninit", ylab = "SSE", main = "SSE vs. Ninit")
}
indices_k <- which(SSEarray[1, 1, ] == best_n & SSEarray[1, 3, ] == best_r)
if (length(indices_k) > 0) {
plot(SSEarray[1, 2, indices_k], SSEarray[1, 4, indices_k], type = "l", col = "red", xlab = "Kcap", ylab = "SSE", main = "SSE vs. Kcap")
}
indices_r <- which(SSEarray[1, 1, ] == best_n & SSEarray[1, 2, ] == best_k)
if (length(indices_r) > 0) {
plot(SSEarray[1, 3, indices_r], SSEarray[1, 4, indices_r], type = "l", col = "green", xlab = "Rates", ylab = "SSE", main = "SSE vs. Rates")
}
plot(Nyear,Nobs)
par(mfrow = c(1,3))
data <- read.csv("../Labs/RMNP elk time series.csv")
Nobs = data$Population_size
Nyear = data$Year
par(mfrow = c(1,3))
plot(Nyear,Nobs)
par(mfrow = c(1,1))
plot(Nyear,Nobs)
best_fit = Nobs + best_r * Nobs * (1 - (Nobs/best_k))
plot(abline(best_fit))
plot(abline(Nfit))
par(mfrow = c(1,1))
plot(Nyear,Nobs)
Nfit[1] = best_n
par(mfrow = c(1,1))
plot(Nyear,Nobs)
Nfit[] = best_n
Nfit[Nyear+1] = Nfit[Nyear] + best_r * Nobs * (1 - (Nobs/best_k))
plot(abline(Nfit))
par(mfrow = c(1,1))
plot(Nyear,Nobs)
Nfit = best_n
Nfit[Nyear+1] = Nfit[Nyear] + best_r * Nobs * (1 - (Nobs/best_k))
plot(abline(Nfit))
abline(Nfit ~ Nyear)
par(mfrow = c(1,1))
plot(Nyear,Nobs)
Nfit = best_n
Nfit[Nyear+1] = Nfit[Nyear] + best_r * Nobs * (1 - (Nobs/best_k))
abline(Nfit ~ Nyear)
abline(Nfit ~ Nyear, col = 'blue')
par(mfrow = c(1,1))
plot(Nyear,Nobs)
Nfit = best_n
Nfit[Nyear+1] = Nfit[Nyear] + best_r * Nfit[Nyear] * (1 - (Nfit[Nyear]/best_k))
abline(Nfit ~ Nyear, col = 'blue')
abline(Nfit, col = 'blue')
par(mfrow = c(1,1))
plot(Nyear,Nobs)
Nfit = best_n
for (i in 1:length(Nyear)){
Nfit[Nyear+1] = Nfit[Nyear] + best_r * Nfit[Nyear] * (1 - (Nfit[Nyear]/best_k))
}
abline(Nfit ~ Nyear, col = 'blue')
lines(Nfit ~ Nyear, col = 'blue')
par(mfrow = c(1,1))
plot(Nyear,Nobs)
par(mfrow = c(1,1))
plot(Nyear,Nobs)
Nfit = best_n
for (i in 1:(length(Nyear)-1)){
Nfit[Nyear+1] = Nfit[Nyear] + best_r * Nfit[Nyear] * (1 - (Nfit[Nyear]/best_k))
}
lines(Nfit ~ Nyear, col = 'blue')
par(mfrow = c(1,1))
plot(Nyear,Nobs)
Nfit = best_n
for (i in 1:(length(Nyear)-1)){
Nfit[i+1] = Nfit[i] + best_r * Nfit[i] * (1 - (Nfit[i]/best_k))
}
lines(Nfit ~ Nyear, col = 'blue')
plot(Nyear,Nobs, pch = 15)
plot(Nyear,Nobs, pch = 16)
residuals = Nobs - Nfit
plot(Nyear,Nobs, pch = 16)
lines(Nfit ~ Nyear, col = 'blue')
lines(residuals(Nobs))
plot(Nyear,Nobs, pch = 16)
lines(Nfit ~ Nyear, col = 'blue')
arrows(Nyear, Nfit, Nyear, Nobs, angle = 90, code = 3, length = 0.1, col = 'red')
arrows(Nyear, Nfit, Nyear, Nobs, angle = 90, code = 1, length = 0.1, col = 'red')
arrows(Nyear, Nfit, Nyear, Nobs, angle = 90, code = 2, length = 0.1, col = 'red')
plot(Nyear,Nobs, pch = 16)
lines(Nfit ~ Nyear, col = 'blue')
arrows(Nyear, Nfit, Nyear, Nobs, angle = 90, code = 2, length = 0.1, col = 'red')
plot(Nyear,Nobs, pch = 16)
lines(Nfit ~ Nyear, col = 'blue')
arrows(Nyear, Nfit, Nyear, Nobs, angle = 90, code = 4, length = 0.1, col = 'red')
lines(Nfit ~ Nyear, col = 'blue')
arrows(Nyear, Nfit, Nyear, Nobs, angle = 90, code = 5, length = 0.1, col = 'red')
arrows(Nyear, Nfit, Nyear, Nobs, angle = 90, code = 6, length = 0.1, col = 'red')
arrows(Nyear, Nfit, Nyear, Nobs, angle = 90, code = 3, length = 0.1, col = 'red')
arrows(Nyear, Nfit, Nyear, Nobs, angle = 90, code = 0, length = 0.1, col = 'red')
plot(Nyear,Nobs, pch = 16)
lines(Nfit ~ Nyear, col = 'blue')
arrows(Nyear, Nfit, Nyear, Nobs, angle = 90, code = 0, length = 0.1, col = 'red')
lines(Nfit ~ Nyear, col = 'blue')
arrows(Nyear, Nfit, Nyear, Nobs, angle = 90, code = 0, length = 0.1, col = 'red')
arrows(Nyear, Nobs+min_SSE, Nyear, Nobs-min_SSE, angle = 90, code = 0, length = 0.1, col = 'green')
arrows(Nyear, Nfit, Nyear, Nobs, angle = 90, code = 0, length = 0.1, col = 'red')
arrows(Nyear, Nobs-min_SSE, Nyear, Nobs+min_SSE, angle = 90, code = 0, length = 0.1, col = 'green')
SSE_final = min_SSE[,,4]
SSE_final = min_SSE[1,4,min_SSE_index]
min_SSE_index <- which.min(SSEarray[1,4,])
min_SSE = SSEarray[1,,min_SSE_index, drop = FALSE]
min_SSE
final_SSE = min_SSE[1,4,]
final_SSE
lines(Nfit ~ Nyear, col = 'blue')
arrows(Nyear, Nfit, Nyear, Nobs, angle = 90, code = 0, length = 0.1, col = 'red')
arrows(Nyear, (Nobs-final_SSE), Nyear, Nobs+final_SSE, angle = 90, code = 0, length = 0.1, col = 'green')
summary(Nfit)
summary(Nfit~Nyear)
summary(data)
stddev = apply(Nobs, 1, sd)
stddev = apply(data, 2, sd)
stddev
stddev = apply(data, 1, sd)
stddev
View(data)
stddev = apply(data, 3, sd)
stddev = apply(data, 1, sd)
stddev
stddev = apply(data, 2, sd)
stddev
stddev = apply(data, 3, sd)
stddev = apply(data, 4, sd)
stddev = apply(data, 2, sd)
stddev
stddev[1,2]
stddev[2]
plot(Nyear,Nobs, pch = 16)
lines(Nfit ~ Nyear, col = 'blue')
arrows(Nyear, (Nobs-sd), Nyear, Nobs+sd, angle = 90, code = 0, length = 0.1, col = 'green')
arrows(Nyear, Nobs-sd, Nyear, Nobs+sd, angle = 90, code = 0, length = 0.1, col = 'green')
stddev = apply(data, 2, sd)
sd = stddev[2]
arrows(Nyear, Nobs-sd, Nyear, Nobs+sd, angle = 90, code = 0, length = 0.1, col = 'green')
arrows(Nyear, Nobs-sd, Nyear, Nobs+sd, angle = 90, code = 0, length = 0.1, col = 'black')
plot(Nyear,Nobs, pch = 16, ylim = 0,2000)
par(mfrow = c(1,1))
Nfit = best_n #Initializing initial population size with best value that minimized SSE
for (i in 1:(length(Nyear)-1)){
Nfit[i+1] = Nfit[i] + best_r * Nfit[i] * (1 - (Nfit[i]/best_k))
}
plot(Nyear,Nobs, pch = 16, ylim = 0,2000)
plot(Nyear,Nobs, pch = 16, ylim = c(0,2000))
lines(Nfit ~ Nyear, col = 'blue')
arrows(Nyear, Nfit, Nyear, Nobs, angle = 90, code = 0, length = 0.1, col = 'red')
arrows(Nyear, Nobs-sd, Nyear, Nobs+sd, angle = 90, code = 0, length = 0.1, col = 'black')
arrows(Nyear, Nobs-sd, Nyear, Nobs+sd, angle = 90, code = 0, length = 0.1, col = 'black')
plot(Nyear,Nobs, pch = 16, ylim = c(0,2000))
lines(Nfit ~ Nyear, col = 'blue')
arrows(Nyear, Nobs-sd, Nyear, Nobs+sd, angle = 90, code = 0, length = 0.1, col = 'black')
for (i in 1:(length(Nyear)-1)){
Nfit[i+1] = Nfit[i] + best_r * Nfit[i] * (1 - (Nfit[i]/best_k))
Nerror[i] = sd/sqrt(Nobs[i])
}
Nerror = 0
for (i in 1:(length(Nyear)-1)){
Nfit[i+1] = Nfit[i] + best_r * Nfit[i] * (1 - (Nfit[i]/best_k))
Nerror[i] = sd/sqrt(Nobs[i])
}
plot(Nyear,Nobs, pch = 16, ylim = c(0,2000))
lines(Nfit ~ Nyear, col = 'blue')
arrows(Nyear, Nobs-Nerror, Nyear, Nobs+Nerror, angle = 90, code = 0, length = 0.1, col = 'black')
Nerror = 0
for (i in 1:(length(Nyear)-1)){
Nfit[i+1] = Nfit[i] + best_r * Nfit[i] * (1 - (Nfit[i]/best_k))
Nerror[i+1] = sd/sqrt(Nobs[i+1])
}
plot(Nyear,Nobs, pch = 16, ylim = c(0,2000))
lines(Nfit ~ Nyear, col = 'blue')
arrows(Nyear, Nobs-Nerror, Nyear, Nobs+Nerror, angle = 90, code = 0, length = 0.1, col = 'black')
arrows(Nyear, Nobs-Nerror, Nyear, Nobs+Nerror, angle = 90, code = 0, length = 0.1, col = 'black')
arrows(Nyear, Nobs-Nerror, Nyear, Nobs+Nerror, angle = 90, code = 0, length = 0.1, col = 'black')
lines(Nfit ~ Nyear, col = 'blue')
for (i in 1:length(Nyear)) {
Nerror[i] = sd/sqrt(Nobs[i])
arrows(Nyear[i], Nobs[i]-Nerror[i], Nyear[i], Nobs[i]+Nerror[i], angle = 90, code = 0, length = 0.1, col = 'black')
}
Nobs[1]
Nfit = best_n #Initializing initial population size with best value that minimized SSE
Nerror = 0
for (i in 1:(length(Nyear)-1)){
Nfit[i+1] = Nfit[i] + best_r * Nfit[i] * (1 - (Nfit[i]/best_k))
}
plot(Nyear,Nobs, pch = 16, ylim = c(0,2000))
lines(Nfit ~ Nyear, col = 'blue')
for (i in 1:length(Nyear)) {
Nerror[i] = sd/sqrt(Nobs[i])
arrows(Nyear[i], Nobs[i]-Nerror[i], Nyear[i], Nobs[i]+Nerror[i], angle = 90, code = 0, length = 0.1, col = 'black')
}
for (i in 1:length(Nyear)) {
Nerror[i] = sd(residuals)/sqrt(Nobs[i])
arrows(Nyear[i], Nobs[i]-Nerror[i], Nyear[i], Nobs[i]+Nerror[i], angle = 90, code = 0, length = 0.1, col = 'black')
}
arrows(Nyear[i], Nobs[i]-Nerror[i], Nyear[i], Nobs[i]+Nerror[i], angle = 90, code = 0, length = 0.1, col = 'black')
for (i in 1:length(Nyear)) {
Nerror[i] = sd(residuals)/sqrt(Nobs[i])
}
arrows(Nyear[i], Nobs[i]-Nerror[i], Nyear[i], Nobs[i]+Nerror[i], angle = 90, code = 0, length = 0.1, col = 'black')
for (i in 1:length(Nyear)) {
Nerror[i] = sd/sqrt(Nobs[i])
}
arrows(Nyear[i], Nobs[i]-Nerror[i], Nyear[i], Nobs[i]+Nerror[i], angle = 90, code = 0, length = 0.1, col = 'black')
Nyear = data$Year
stddev = apply(data, 2, sd)
sdev = stddev[2]
par(mfrow = c(1,1))
Nfit = best_n #Initializing initial population size with best value that minimized SSE
Nerror = 0
for (i in 1:(length(Nyear)-1)){
Nfit[i+1] = Nfit[i] + best_r * Nfit[i] * (1 - (Nfit[i]/best_k))
}
plot(Nyear,Nobs, pch = 16, ylim = c(0,2000))
lines(Nfit ~ Nyear, col = 'blue')
for (i in 1:length(Nyear)) {
Nerror[i] = sd/sqrt(Nobs[i])
}
arrows(Nyear[i], Nobs[i]-Nerror[i], Nyear[i], Nobs[i]+Nerror[i], angle = 90, code = 0, length = 0.1, col = 'black')
for (i in 1:(length(Nyear)-1)){
Nfit[i+1] = Nfit[i] + best_r * Nfit[i] * (1 - (Nfit[i]/best_k))
}
plot(Nyear,Nobs, pch = 16, ylim = c(0,2000))
lines(Nfit ~ Nyear, col = 'blue')
for (i in 1:length(Nyear)) {
Nerror[i] = sdev/sqrt(Nobs[i])
}
arrows(Nyear[i], Nobs[i]-Nerror[i], Nyear[i], Nobs[i]+Nerror[i], angle = 90, code = 0, length = 0.1, col = 'black')
plot(Nyear,Nobs, pch = 16, ylim = c(0,1500))
plot(Nyear,Nobs, pch = 16, ylim = c(0,1600))
lines(Nfit ~ Nyear, col = 'blue')
for (i in 1:length(Nyear)) {
Nerror[i] = sdev/sqrt(Nobs[i])
}
arrows(Nyear[i], Nobs[i]-Nerror[i], Nyear[i], Nobs[i]+Nerror[i], angle = 90, code = 0, length = 0.1, col = 'black')
install.packages("plotrix")
library(plotrix)
std.error(Nobs)
plot(Nyear,Nobs, pch = 16, ylim = c(0,1600))
lines(Nfit ~ Nyear, col = 'blue')
for (i in 1:length(Nyear)) {
Nerror[i] = std.error(Nobs[i])
}
arrows(Nyear[i], Nobs[i]-Nerror[i], Nyear[i], Nobs[i]+Nerror[i], angle = 90, code = 0, length = 0.1, col = 'black')
